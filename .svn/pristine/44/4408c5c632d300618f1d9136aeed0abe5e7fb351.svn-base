
                (function() {
                    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
                    var __module = nodeEnv ? module : {exports:{}};
                    var __filename = 'preview-scripts/assets/Script/com/ObjectPool.js';
                    var __require = nodeEnv ? function (request) {
                        return cc.require(request);
                    } : function (request) {
                        return __quick_compile_project__.require(request, __filename);
                    };
                    function __define (exports, require, module) {
                        if (!nodeEnv) {__quick_compile_project__.registerModule(__filename, module);}"use strict";
cc._RF.push(module, 'e3870eNNDxL9LCgtRlpCt9Y', 'ObjectPool');
// Script/com/ObjectPool.ts

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ObjectPool = void 0;
var GloBal_1 = require("../Shared/GloBal");
/**
 * 对象池类
 */
var ObjectPool = /** @class */ (function () {
    /**[public]
     *
     * @param _groupMode 组模式
     */
    function ObjectPool(_groupMode) {
        if (_groupMode === void 0) { _groupMode = false; }
        this.mObjectMap = {};
        this.mObjectClassMap = {};
        this.mCurClassKey = null;
        this.mGroupMode = _groupMode;
    }
    ObjectPool.prototype.getSaveKey = function (_class) {
        return cc.js.getClassName(_class);
    };
    /**[public]
     * 注册对象 以类注册 如果在此对象池初始化时 设置的是组模式 那么_objectType不可为空
     * 如果是非组模式 则可设置为空
     * @param _class
     * @param _objectType
     */
    ObjectPool.prototype.regObject = function (_class, _objectType) {
        if (_objectType === void 0) { _objectType = null; }
        if (!this.mGroupMode && this.mCurClassKey) {
            return;
        }
        else if (this.mGroupMode && (_objectType == null)) {
            GloBal_1.Global.Utils.debugOutput(this.getSaveKey(_class) + " 's type not null");
            return;
        }
        if (!this.mGroupMode && (_objectType == null)) {
            this.mCurClassKey = this.getSaveKey(_class);
        }
        var _classKey = _objectType != null ? _objectType : this.mCurClassKey;
        this.mObjectClassMap[_classKey] = _class;
    };
    /**
     * 是否注册过某个类
     */
    ObjectPool.prototype.hasReg = function (_objectType) {
        return this.getObjectClz(_objectType) != undefined;
    };
    ObjectPool.prototype.getObjectClz = function (_objectType) {
        return this.mObjectClassMap[_objectType];
    };
    /**[public]
     * 取得对象
     * @param _objectType
     */
    ObjectPool.prototype.getObject = function (_params, _objectType) {
        if (_params === void 0) { _params = null; }
        if (_objectType === void 0) { _objectType = null; }
        _objectType = this.mCurClassKey ? this.mCurClassKey : _objectType;
        if (_objectType == null) {
            GloBal_1.Global.Utils.debugOutput("_objectType can not null");
            return;
        }
        if (!this.hasReg(_objectType)) {
            GloBal_1.Global.Utils.debugOutput("objectType = " + _objectType + " not regist");
            return;
        }
        var _instanceList = this.getObjectList(_objectType);
        var _iObjectPool = null;
        if (_instanceList.length) {
            _iObjectPool = _instanceList.pop();
        }
        else {
            _iObjectPool = new this.mObjectClassMap[_objectType]();
            _iObjectPool["objectType"] = _objectType;
        }
        if (_iObjectPool.objectInit.length) {
            _iObjectPool.objectInit(_params);
        }
        else {
            _iObjectPool.objectInit();
        }
        return _iObjectPool;
    };
    /**[public]
     * 放回
     * @param _iObjectPool
     */
    ObjectPool.prototype.putObject = function (_iObjectPool) {
        if (!_iObjectPool)
            return;
        var _objectType = _iObjectPool["objectType"];
        if (_objectType == undefined || _objectType == null) {
            for (var _key in this.mObjectClassMap) {
                var _objectClass = this.mObjectClassMap[_key];
                if (_iObjectPool instanceof _objectClass) {
                    _objectType = _key;
                    break;
                }
            }
        }
        if (_objectType != undefined || _objectType != null) {
            var _instanceList = this.getObjectList(_objectType);
            _iObjectPool.objectReset();
            _instanceList.unshift(_iObjectPool);
        }
        else {
            GloBal_1.Global.Utils.debugOutput(this.getSaveKey(_iObjectPool) + " not exist");
        }
    };
    /**[public]
     * 批量放回
     * @param _iObjectPools
     */
    ObjectPool.prototype.putObjects = function (_iObjectPools) {
        var _this = this;
        _iObjectPools.forEach(function (value) {
            _this.putObject(value);
        });
    };
    /**
     * 清空
     * _objectType 类型 默认清空所有
     */
    ObjectPool.prototype.clearObject = function (_objectType) {
        if (_objectType === void 0) { _objectType = null; }
        _objectType = this.mCurClassKey ? this.mCurClassKey : _objectType;
        if (_objectType) {
            delete this.mObjectMap[_objectType];
            delete this.mObjectClassMap[_objectType];
        }
        else {
            this.mObjectMap = {};
            this.mObjectClassMap = {};
        }
    };
    ObjectPool.prototype.getObjectList = function (_objectType) {
        var _tempList = this.mObjectMap[_objectType];
        if (!_tempList) {
            _tempList = [];
            this.mObjectMap[_objectType] = _tempList;
        }
        return _tempList;
    };
    return ObjectPool;
}());
exports.ObjectPool = ObjectPool;

cc._RF.pop();
                    }
                    if (nodeEnv) {
                        __define(__module.exports, __require, __module);
                    }
                    else {
                        __quick_compile_project__.registerModuleFunc(__filename, function () {
                            __define(__module.exports, __require, __module);
                        });
                    }
                })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0c1xcU2NyaXB0XFxjb21cXE9iamVjdFBvb2wudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsMkNBQTBDO0FBVzFDOztHQUVHO0FBQ0g7SUFLQzs7O09BR0c7SUFDSCxvQkFBbUIsVUFBMkI7UUFBM0IsMkJBQUEsRUFBQSxrQkFBMkI7UUFQdEMsZUFBVSxHQUFXLEVBQUUsQ0FBQztRQUN4QixvQkFBZSxHQUFXLEVBQUUsQ0FBQztRQUM3QixpQkFBWSxHQUFXLElBQUksQ0FBQztRQU1uQyxJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztJQUM5QixDQUFDO0lBQ08sK0JBQVUsR0FBbEIsVUFBbUIsTUFBVztRQUM3QixPQUFPLEVBQUUsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRDs7Ozs7T0FLRztJQUNJLDhCQUFTLEdBQWhCLFVBQWlCLE1BQVcsRUFBRSxXQUF1QjtRQUF2Qiw0QkFBQSxFQUFBLGtCQUF1QjtRQUNwRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxJQUFJLENBQUMsWUFBWSxFQUFFO1lBQzFDLE9BQU87U0FDUDthQUFNLElBQUksSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsRUFBRTtZQUNwRCxlQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxzQkFBbUIsQ0FBQyxDQUFBO1lBQ3ZFLE9BQU87U0FDUDtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQzlDLElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUM1QztRQUNELElBQUksU0FBUyxHQUFHLFdBQVcsSUFBSSxJQUFJLENBQUMsQ0FBQyxDQUFDLFdB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QUNJLCtCQUFVLEdBQWpCLFVBQWtCLGFBQTRCO1FBQTlDLGlCQUlDO1FBSEEsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFDLEtBQUs7WUFDM0IsS0FBSSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQTtJQUNILENBQUM7SUFDRDs7O09BR0c7SUFDSSxnQ0FBVyxHQUFsQixVQUFtQixXQUF1QjtRQUF2Qiw0QkFBQSxFQUFBLGtCQUF1QjtRQUN6QyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO1FBQ2xFLElBQUksV0FBVyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNwQyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDekM7YUFBTTtZQUNOLElBQUksQ0FBQyxVQUFVLEdBQUcsRUFBRSxDQUFDO1lBQ3JCLElBQUksQ0FBQyxlQUFlLEdBQUcsRUFBRSxDQUFDO1NBQzFCO0lBQ0YsQ0FBQztJQUNNLGtDQUFhLEdBQXBCLFVBQXFCLFdBQWdCO1FBQ3BDLElBQUksU0FBUyxHQUFrQixJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzVELElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDZixTQUFTLEdBQUcsRUFBRSxDQUFDO1lBQ2YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxXQUFXLENBQUMsR0FBRyxTQUFTLENBQUM7U0FDekM7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNsQixDQUFDO0lBQ0YsaUJBQUM7QUFBRCxDQWhJQSxBQWdJQyxJQUFBO0FBaElZLGdDQUFVIiwiZmlsZSI6IiIsInNvdXJjZVJvb3QiOiIvIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR2xvYmFsIH0gZnJvbSBcIi4uL1NoYXJlZC9HbG9CYWxcIjtcclxuXHJcbi8qKlxyXG4gKiDlr7nosaHmsaDmjqXlj6NcclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSU9iamVjdFBvb2wge1xyXG5cdC8qKuWcqOiOt+WPluaXtuiwg+eUqCAqL1xyXG5cdG9iamVjdEluaXQoX3BhcmFtcz86IGFueSk7XHJcblx0Lyoq5Zyo5pS+5Zue5rGg5a2Q6YeM6Z2i5pe26LCD55SoICovXHJcblx0b2JqZWN0UmVzZXQoKTtcclxufVxyXG4vKipcclxuICog5a+56LGh5rGg57G7XHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgT2JqZWN0UG9vbCB7XHJcblx0cHJpdmF0ZSBtR3JvdXBNb2RlOiBib29sZWFuO1xyXG5cdHByaXZhdGUgbU9iamVjdE1hcDogT2JqZWN0ID0ge307XHJcblx0cHJpdmF0ZSBtT2JqZWN0Q2xhc3NNYXA6IE9iamVjdCA9IHt9O1xyXG5cdHByaXZhdGUgbUN1ckNsYXNzS2V5OiBzdHJpbmcgPSBudWxsO1xyXG5cdC8qKltwdWJsaWNdIFxyXG5cdCAqIFxyXG5cdCAqIEBwYXJhbSBfZ3JvdXBNb2RlIOe7hOaooeW8jyBcclxuXHQgKi9cclxuXHRwdWJsaWMgY29uc3RydWN0b3IoX2dyb3VwTW9kZTogYm9vbGVhbiA9IGZhbHNlKSB7XHJcblx0XHR0aGlzLm1Hcm91cE1vZGUgPSBfZ3JvdXBNb2RlO1xyXG5cdH1cclxuXHRwcml2YXRlIGdldFNhdmVLZXkoX2NsYXNzOiBhbnkpIHtcclxuXHRcdHJldHVybiBjYy5qcy5nZXRDbGFzc05hbWUoX2NsYXNzKTtcclxuXHR9XHJcblx0LyoqW3B1YmxpY10gXHJcblx0ICog5rOo5YaM5a+56LGhIOS7peexu+azqOWGjCDlpoLmnpzlnKjmraTlr7nosaHmsaDliJ3lp4vljJbml7Yg6K6+572u55qE5piv57uE5qih5byPIOmCo+S5iF9vYmplY3RUeXBl5LiN5Y+v5Li656m6XHJcblx0ICog5aaC5p6c5piv6Z2e57uE5qih5byPIOWImeWPr+iuvue9ruS4uuepulxyXG5cdCAqIEBwYXJhbSBfY2xhc3MgXHJcblx0ICogQHBhcmFtIF9vYmplY3RUeXBlIFxyXG5cdCAqL1xyXG5cdHB1YmxpYyByZWdPYmplY3QoX2NsYXNzOiBhbnksIF9vYmplY3RUeXBlOiBhbnkgPSBudWxsKSB7XHJcblx0XHRpZiAoIXRoaXMubUdyb3VwTW9kZSAmJiB0aGlzLm1DdXJDbGFzc0tleSkge1xyXG5cdFx0XHRyZXR1cm47XHJcblx0XHR9IGVsc2UgaWYgKHRoaXMubUdyb3VwTW9kZSAmJiAoX29iamVjdFR5cGUgPT0gbnVsbCkpIHtcclxuXHRcdFx0R2xvYmFsLlV0aWxzLmRlYnVnT3V0cHV0KGAke3RoaXMuZ2V0U2F2ZUtleShfY2xhc3MpfSAncyB0eXBlIG5vdCBudWxsYClcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0aWYgKCF0aGlzLm1Hcm91cE1vZGUgJiYgKF9vYmplY3RUeXBlID09IG51bGwpKSB7XHJcblx0XHRcdHRoaXMubUN1ckNsYXNzS2V5ID0gdGhpcy5nZXRTYXZlS2V5KF9jbGFzcyk7XHJcblx0XHR9XHJcblx0XHRsZXQgX2NsYXNzS2V5ID0gX29iamVjdFR5cGUgIT0gbnVsbCA/IF9vYmplY3RUeXBlIDogdGhpcy5tQ3VyQ2xhc3NLZXk7XHJcblx0XHR0aGlzLm1PYmplY3RDbGFzc01hcFtfY2xhc3NLZXldID0gX2NsYXNzO1xyXG5cdH1cclxuXHQvKipcclxuXHQgKiDmmK/lkKbms6jlhozov4fmn5DkuKrnsbtcclxuXHQgKi9cclxuXHRwdWJsaWMgaGFzUmVnKF9vYmplY3RUeXBlOiBhbnkpOiBib29sZWFuIHtcclxuXHRcdHJldHVybiB0aGlzLmdldE9iamVjdENseihfb2JqZWN0VHlwZSkgIT0gdW5kZWZpbmVkO1xyXG5cdH1cclxuXHRwdWJsaWMgZ2V0T2JqZWN0Q2x6KF9vYmplY3RUeXBlOiBhbnkpOiBhbnkge1xyXG5cdFx0cmV0dXJuIHRoaXMubU9iamVjdENsYXNzTWFwW19vYmplY3RUeXBlXTtcclxuXHR9XHJcblx0LyoqW3B1YmxpY10gXHJcblx0ICog5Y+W5b6X5a+56LGhXHJcblx0ICogQHBhcmFtIF9vYmplY3RUeXBlIFxyXG5cdCAqL1xyXG5cdHB1YmxpYyBnZXRPYmplY3QoX3BhcmFtczogYW55ID0gbnVsbCwgX29iamVjdFR5cGU6IGFueSA9IG51bGwpOiBhbnkge1xyXG5cdFx0X29iamVjdFR5cGUgPSB0aGlzLm1DdXJDbGFzc0tleSA/IHRoaXMubUN1ckNsYXNzS2V5IDogX29iamVjdFR5cGU7XHJcblx0XHRpZiAoX29iamVjdFR5cGUgPT0gbnVsbCkge1xyXG5cdFx0XHRHbG9iYWwuVXRpbHMuZGVidWdPdXRwdXQoXCJfb2JqZWN0VHlwZSBjYW4gbm90IG51bGxcIik7XHJcblx0XHRcdHJldHVybjtcclxuXHRcdH1cclxuXHRcdGlmICghdGhpcy5oYXNSZWcoX29iamVjdFR5cGUpKSB7XHJcblx0XHRcdEdsb2JhbC5VdGlscy5kZWJ1Z091dHB1dChgb2JqZWN0VHlwZSA9ICR7X29iamVjdFR5cGV9IG5vdCByZWdpc3RgKTtcclxuXHRcdFx0cmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0bGV0IF9pbnN0YW5jZUxpc3Q6IElPYmplY3RQb29sW10gPSB0aGlzLmdldE9iamVjdExpc3QoX29iamVjdFR5cGUpO1xyXG5cdFx0bGV0IF9pT2JqZWN0UG9vbDogSU9iamVjdFBvb2wgPSBudWxsO1xyXG5cdFx0aWYgKF9pbnN0YW5jZUxpc3QubGVuZ3RoKSB7XHJcblx0XHRcdF9pT2JqZWN0UG9vbCA9IF9pbnN0YW5jZUxpc3QucG9wKCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRfaU9iamVjdFBvb2wgPSBuZXcgdGhpcy5tT2JqZWN0Q2xhc3NNYXBbX29iamVjdFR5cGVdKCk7XHJcblx0XHRcdF9pT2JqZWN0UG9vbFtcIm9iamVjdFR5cGVcIl0gPSBfb2JqZWN0VHlwZTtcclxuXHRcdH1cclxuXHRcdGlmIChfaU9iamVjdFBvb2wub2JqZWN0SW5pdC5sZW5ndGgpIHtcclxuXHRcdFx0X2lPYmplY3RQb29sLm9iamVjdEluaXQoX3BhcmFtcyk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRfaU9iamVjdFBvb2wub2JqZWN0SW5pdCgpO1xyXG5cdFx0fVxyXG5cclxuXHRcdHJldHVybiBfaU9iamVjdFBvb2w7XHJcblx0fVxyXG5cdC8qKltwdWJsaWNdIFxyXG5cdCAqIOaUvuWbnlxyXG5cdCAqIEBwYXJhbSBfaU9iamVjdFBvb2wgXHJcblx0ICovXHJcblx0cHVibGljIHB1dE9iamVjdChfaU9iamVjdFBvb2w6IElPYmplY3RQb29sKSB7XHJcblx0XHRpZiAoIV9pT2JqZWN0UG9vbCkgcmV0dXJuO1xyXG5cdFx0bGV0IF9vYmplY3RUeXBlID0gX2lPYmplY3RQb29sW1wib2JqZWN0VHlwZVwiXTtcclxuXHRcdGlmIChfb2JqZWN0VHlwZSA9PSB1bmRlZmluZWQgfHwgX29iamVjdFR5cGUgPT0gbnVsbCkge1xyXG5cdFx0XHRmb3IgKGxldCBfa2V5IGluIHRoaXMubU9iamVjdENsYXNzTWFwKSB7XHJcblx0XHRcdFx0bGV0IF9vYmplY3RDbGFzczogYW55ID0gdGhpcy5tT2JqZWN0Q2xhc3NNYXBbX2tleV07XHJcblx0XHRcdFx0aWYgKF9pT2JqZWN0UG9vbCBpbnN0YW5jZW9mIF9vYmplY3RDbGFzcykge1xyXG5cdFx0XHRcdFx0X29iamVjdFR5cGUgPSBfa2V5O1xyXG5cdFx0XHRcdFx0YnJlYWs7XHJcblx0XHRcdFx0fVxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0XHRpZiAoX29iamVjdFR5cGUgIT0gdW5kZWZpbmVkIHx8IF9vYmplY3RUeXBlICE9IG51bGwpIHtcclxuXHRcdFx0bGV0IF9pbnN0YW5jZUxpc3Q6IElPYmplY3RQb29sW10gPSB0aGlzLmdldE9iamVjdExpc3QoX29iamVjdFR5cGUpO1xyXG5cdFx0XHRfaU9iamVjdFBvb2wub2JqZWN0UmVzZXQoKTtcclxuXHRcdFx0X2luc3RhbmNlTGlzdC51bnNoaWZ0KF9pT2JqZWN0UG9vbCk7XHJcblx0XHR9IGVsc2Uge1xyXG5cdFx0XHRHbG9iYWwuVXRpbHMuZGVidWdPdXRwdXQoYCR7dGhpcy5nZXRTYXZlS2V5KF9pT2JqZWN0UG9vbCl9IG5vdCBleGlzdGApO1xyXG5cdFx0fVxyXG5cdH1cclxuXHQvKipbcHVibGljXSBcclxuXHQgKiDmibnph4/mlL7lm55cclxuXHQgKiBAcGFyYW0gX2lPYmplY3RQb29scyBcclxuXHQgKi9cclxuXHRwdWJsaWMgcHV0T2JqZWN0cyhfaU9iamVjdFBvb2xzOiBJT2JqZWN0UG9vbFtdKSB7XHJcblx0XHRfaU9iamVjdFBvb2xzLmZvckVhY2goKHZhbHVlKSA9PiB7XHJcblx0XHRcdHRoaXMucHV0T2JqZWN0KHZhbHVlKTtcclxuXHRcdH0pXHJcblx0fVxyXG5cdC8qKlxyXG5cdCAqIOa4heepulxyXG5cdCAqIF9vYmplY3RUeXBlIOexu+WeiyDpu5jorqTmuIXnqbrmiYDmnIlcclxuXHQgKi9cclxuXHRwdWJsaWMgY2xlYXJPYmplY3QoX29iamVjdFR5cGU6IGFueSA9IG51bGwpIHtcclxuXHRcdF9vYmplY3RUeXBlID0gdGhpcy5tQ3VyQ2xhc3NLZXkgPyB0aGlzLm1DdXJDbGFzc0tleSA6IF9vYmplY3RUeXBlO1xyXG5cdFx0aWYgKF9vYmplY3RUeXBlKSB7XHJcblx0XHRcdGRlbGV0ZSB0aGlzLm1PYmplY3RNYXBbX29iamVjdFR5cGVdO1xyXG5cdFx0XHRkZWxldGUgdGhpcy5tT2JqZWN0Q2xhc3NNYXBbX29iamVjdFR5cGVdO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0dGhpcy5tT2JqZWN0TWFwID0ge307XHJcblx0XHRcdHRoaXMubU9iamVjdENsYXNzTWFwID0ge307XHJcblx0XHR9XHJcblx0fVxyXG5cdHB1YmxpYyBnZXRPYmplY3RMaXN0KF9vYmplY3RUeXBlOiBhbnkpOiBJT2JqZWN0UG9vbFtdIHtcclxuXHRcdGxldCBfdGVtcExpc3Q6IElPYmplY3RQb29sW10gPSB0aGlzLm1PYmplY3RNYXBbX29iamVjdFR5cGVdO1xyXG5cdFx0aWYgKCFfdGVtcExpc3QpIHtcclxuXHRcdFx0X3RlbXBMaXN0ID0gW107XHJcblx0XHRcdHRoaXMubU9iamVjdE1hcFtfb2JqZWN0VHlwZV0gPSBfdGVtcExpc3Q7XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gX3RlbXBMaXN0O1xyXG5cdH1cclxufSJdfQ==