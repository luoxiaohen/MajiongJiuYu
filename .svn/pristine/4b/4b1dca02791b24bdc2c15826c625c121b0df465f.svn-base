{"version":3,"sources":["assets\\Script\\event\\EventCenter.ts"],"names":[],"mappings":";;;;;;AAEA;IAAA;QACY,gBAAW,GAAmB,IAAI,EAAE,CAAC,WAAW,EAAE,CAAC;IAuC/D,CAAC;IApCG,sBAAkB,kBAAG;aAArB;YACI,IAAG,CAAC,IAAI,CAAC,IAAI,EAAC;gBACZ,IAAI,CAAC,IAAI,GAAC,IAAI,WAAW,EAAE,CAAC;aAC7B;YACD,OAAO,IAAI,CAAC,IAAI,CAAE;QACtB,CAAC;;;OAAA;IAGD;;;;OAIG;IACI,sCAAgB,GAAvB,UAA2B,IAAY,EAAE,QAA2C,EAAE,MAAY;QAChG,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC9C,CAAC;IAED;;;OAGG;IACI,mCAAa,GAApB,UAAwB,IAAY,EAAE,IAAQ;QAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1C,CAAC;IAEM,sCAAgB,GAAvB,UAAwB,KAAK;QAC3B,OAAO,IAAI,CAAC,WAAW,IAAI,IAAI,IAAI,IAAI,CAAC,WAAW,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;IAC9E,CAAC;IAED;;;OAGG;IACI,yCAAmB,GAA1B,UAA8B,IAAY,EAAE,QAA2C,EAAE,MAAY;QACnG,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,MAAM,CAAC,CAAC;IAC/C,CAAC;IACL,kBAAC;AAAD,CAxCA,AAwCC,IAAA","file":"","sourceRoot":"/","sourcesContent":["import EventType from \"./EventType\";\r\n\r\nexport default class EventCenter {\r\n    private eventTarget: cc.EventTarget = new cc.EventTarget();\r\n  \r\n    private static _ins: EventCenter;\r\n    public static get ins() {\r\n        if(!this._ins){\r\n          this._ins=new EventCenter();\r\n        }\r\n        return this._ins ;\r\n    }\r\n\r\n  \r\n    /**\r\n     * Listen to a notification\r\n     * @param name\r\n     * @param callback\r\n     */\r\n    public addEventListener<T>(type: string, callback: ($type: string, $data: T) => void, target?: any): void {\r\n      this.eventTarget.on(type, callback, target);\r\n    }\r\n  \r\n    /**\r\n     * Dispatch a notification\r\n     * @param name\r\n     */\r\n    public dispatchEvent<T>(type: string, data?: T) {\r\n      this.eventTarget.emit(type, type, data);\r\n    }\r\n  \r\n    public hasEventListener($type): boolean {\r\n      return this.eventTarget != null && this.eventTarget.hasEventListener($type);\r\n    }\r\n  \r\n    /**\r\n     * Cancel listen\r\n     * @param name\r\n     */\r\n    public removeEventListener<T>(type: string, callback: ($type: string, $data: T) => void, target?: any): void {\r\n      this.eventTarget.off(type, callback, target);\r\n    }\r\n}"]}