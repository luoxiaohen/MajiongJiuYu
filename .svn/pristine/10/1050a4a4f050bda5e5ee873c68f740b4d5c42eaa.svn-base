{"version":3,"sources":["assets\\Script\\com\\http\\Http.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// import { App } from \"../../App\";\r\n// import { CommonEvent } from \"../../events/CommonEvent\";\r\n// import { CallBack } from \"../../utils/CallBack\";\r\n// import { Logger, LoggerType } from \"../../utils/Logger\";\r\n// import { ObjectPool } from \"../../utils/ObjectPool\";\r\n// import { HttpMethod } from \"./HttpMethod\";\r\n// import { WebHttpRequest } from \"./WebHttpRequest\";\r\n\r\n// /**\r\n//      * Http\r\n//      */\r\n// export class Http {\r\n//     private static sHttpObjectPool: ObjectPool = new ObjectPool();\r\n//     private static sReRequestTimes: number = 0;\r\n//     private static sGlobalErrorHandler: CallBack;\r\n//     private static sGlobalParams: Object = null;\r\n//     private static sRequestHeaders: { header: string, value: string }[] = [];\r\n//     /**\r\n//      * 数据返回代理处理 参数为原始返回数据 需要返回一个判断标志，如果为 true 那么会调用完成回调，否则可以阻断完成回调\r\n//      */\r\n//     public static responseAgent: (_response: any) => boolean = null;\r\n//     /**\r\n//      * 数据请求代理处理 实际场景为：每个api接口均需要一个登录token验证，而token获取是单独接口，因此在非token接口外的其他接口每次请求时判断token是否存在\r\n//      * 如果不存在 则先获取token,然后继续当前接口请求\r\n//      * _url 请求时的url地址\r\n//      * _continue 继续调用请求 \r\n//      */\r\n//     public static requestAgent: (_url:string,_continue:Function) =>void = null;\r\n\r\n//     private mRequest: WebHttpRequest;\r\n//     private mOnComplete: CallBack;\r\n//     private mOnError: CallBack;\r\n//     private mReRequestTimes: number = 0;\r\n//     private mRequestData: { url: string, data: any, type: string } = { url: null, data: null, type: null };\r\n//     private mRequestDataString: string;\r\n//     /**\r\n//      * 是否使用全局头部设置数据\r\n//      */\r\n//     public useGlobalHeaders: boolean = true;\r\n//     /**\r\n//      * 忽略掉的全局头部设置数据\r\n//      */\r\n//     public ingoreGlobalHeaders: string[] = [];\r\n//     public constructor() {\r\n//         this.mRequest = new WebHttpRequest();\r\n//         this.mRequest.timeout = 30 * 1000;\r\n//         this.mRequest.responseType = \"text\";\r\n//     }\r\n//     public set withCredentials(_value: boolean) {\r\n//         this.mRequest.withCredentials = _value;\r\n//     }\r\n//     /**[public] \r\n//      * 注册回调函数\r\n//      * @param _onComplete \r\n//      * @param _onError \r\n//      * @param _target \r\n//      */\r\n//     public regCallBack(_onComplete: Function, _onError: Function, _target: any = null) {\r\n//         this.mOnComplete = CallBack.bind(_onComplete, _target, true);\r\n//         this.mOnError = CallBack.bind(_onError, _target, true);\r\n//     }\r\n//     public post(_url: string, _data?: Object) {\r\n//         this.mRequestData.url = _url;\r\n//         this.mRequestData.data = this.formatData(_data);\r\n//         this.mRequest.setRequestHeader(\"Content-Type\"\r\n//             , \"application/x-www-form-urlencoded\");\r\n//         this.mRequestData.type = HttpMethod.POST;\r\n//         setTimeout(this.request.bind(this), 1);\r\n//     }\r\n//     public get(_url: string, _data?: Object) {\r\n//         let _params = this.formatData(_data);\r\n//         this.mRequestData.url = _params ? `${_url}?${_params}` : _url;\r\n//         this.mRequestData.data = null;\r\n//         this.mRequestData.type = HttpMethod.GET;\r\n//         setTimeout(this.request.bind(this), 1);\r\n//         // this.request();\r\n//     }\r\n//     private formatData(_data: any) {\r\n//         if (_data == null) return null;\r\n//         let _params = \"\";\r\n//         for (let _key in _data) {\r\n//             _params += `${_key}=${_data[_key]}&`;\r\n//         }\r\n//         return _params.substr(0, _params.length - 1);\r\n//     }\r\n//     public reRequest() {\r\n//         this.log(`Http reRequest ${this.mReRequestTimes}`);\r\n//         this.request();\r\n//     }\r\n//     private request() {\r\n//         if( Http.requestAgent ){\r\n//             Http.requestAgent(this.mRequestData.url,()=>{\r\n//                 this.continueRequest();\r\n//             })\r\n//         }else{\r\n//             this.continueRequest();\r\n//         }\r\n        \r\n//         this.log(`Http request ${this.mRequestDataString}`);\r\n//     }\r\n//     private continueRequest(){\r\n//         this.mRequest.open(this.mRequestData.url, this.mRequestData.type);\r\n//         if (this.useGlobalHeaders) {\r\n//             Http.sRequestHeaders.forEach((value) => {\r\n//                 if (this.ingoreGlobalHeaders.indexOf(value.header) == -1) {\r\n//                     this.mRequest.setRequestHeader(value.header, value.value);\r\n//                 }\r\n//             }, this);\r\n//         }\r\n//         this.mergeRequestData(this.mRequestData.data);\r\n//         this.getRequestDataString();\r\n//         this.mRequest.send(this.mRequestData.data);\r\n//     }\r\n\r\n//     private getRequestDataString() {\r\n//         if (Logger.canLogger(LoggerType.HTTP)) {\r\n//             this.mRequestDataString = \"\";\r\n//             for (let _key in this.mRequestData) {\r\n//                 let _data = this.mRequestData[_key];\r\n//                 if (typeof _data == \"object\") _data = JSON.stringify(_data);\r\n//                 this.mRequestDataString += `${_key}:${_data} `;\r\n//             }\r\n//         }\r\n//     }\r\n//     //将传入的请求数据 与全局请求数据进行合并\r\n//     private mergeRequestData(_curData: Object) {\r\n//         if (Http.sGlobalParams) {\r\n//             _curData = _curData ? _curData : {};\r\n//             for (let _key in Http.sGlobalParams) {\r\n//                 _curData[_key] = Http.sGlobalParams[_key];\r\n//             }\r\n//         }\r\n//     }\r\n//     /**在获取时调用 */\r\n//     public objectInit() {\r\n//         this.mRequestData = { url: null, data: null, type: null };\r\n//         this.mReRequestTimes = Http.sReRequestTimes;\r\n//         this.mRequest.on(CommonEvent.COMPLETE, this.onRequestCompleteHandler, this);\r\n//         this.mRequest.on(CommonEvent.IO_ERROR, this.onRequestErrorHandler, this);\r\n//     }\r\n//     private onRequestCompleteHandler() {\r\n//         this.log(`Http response ${this.mRequest.response}`);\r\n//         let _response = this.mRequest.response;\r\n//         try {\r\n//             _response = JSON.parse(_response);\r\n//         } catch (e) {\r\n//         }\r\n//         let _excuteComplete = true;\r\n//         if (Http.responseAgent) {\r\n//             _excuteComplete = Http.responseAgent(_response);\r\n//         }\r\n//         if (_excuteComplete) {\r\n//             this.mOnComplete && (this.mOnComplete.excute(_response));\r\n//         }\r\n//         Http.sHttpObjectPool.putObject(this);\r\n//     }\r\n//     private onRequestErrorHandler(err) {\r\n//         if (this.mReRequestTimes == 0) {\r\n//             this.log(`Http Err ${err}`);\r\n//             this.mOnError && (this.mOnError.excute(err));\r\n//             Http.sGlobalErrorHandler && (Http.sGlobalErrorHandler.excute(err,this.mRequestData.url))\r\n//             Http.sHttpObjectPool.putObject(this);\r\n//         } else {\r\n//             this.reRequest();\r\n//             this.mReRequestTimes--;\r\n//         }\r\n//     }\r\n//     private log(_msg: string) {\r\n//         Logger.log(_msg, LoggerType.HTTP);\r\n//     }\r\n//     /**在放回池子里面时调用 */\r\n//     public objectReset() {\r\n//         this.mRequest.clearRequestHeader();\r\n//         this.mOnComplete = null;\r\n//         this.mOnError = null;\r\n//         this.mRequestData = null;\r\n//         this.useGlobalHeaders = true;\r\n//         this.mRequest.off(CommonEvent.COMPLETE, this.onRequestCompleteHandler, this);\r\n//         this.mRequest.off(CommonEvent.IO_ERROR, this.onRequestErrorHandler, this);\r\n//     }\r\n//     public static setGlobalParams(_params: Object) {\r\n//         this.sGlobalParams = _params;\r\n//     }\r\n//     /**[public | static] \r\n//      * 设置全局请求错误时的回调\r\n//      * @param _onError \r\n//      * @param _target \r\n//      */\r\n//     public static setGlobalErrorHandler(_onError: Function, _target: any) {\r\n//         if (_onError) {\r\n//             this.sGlobalErrorHandler = CallBack.bind(_onError, _target);\r\n//         } else {\r\n//             this.sGlobalErrorHandler = null;\r\n//         }\r\n//     }\r\n//     /**[public | static] \r\n//      * 设置请求头列表\r\n//      * * ..._params \r\n//      * * \r\n//      */\r\n//     public static setRequestHeaders(..._params: { header: string, value: string }[]) {\r\n//         this.sRequestHeaders.length = 0;\r\n//         _params.forEach((value) => {\r\n//             this.sRequestHeaders.push(value);\r\n//         });\r\n//     }\r\n//     /**[public | static] \r\n//      * 当请求失败时尝试重新请求的次数 默认为0\r\n//      * @param _value \r\n//      */\r\n//     public static set reRequestTimesWhileError(_value: number) {\r\n//         this.sReRequestTimes = _value <= 0 ? 0 : _value;\r\n//     }\r\n//     /**[public | static] \r\n//      * POST方式请求\r\n//      * @param _url \r\n//      * @param _data \r\n//      * @param _onComplete \r\n//      * @param _onError \r\n//      * @param _target \r\n//      */\r\n//     public static POST(_url: string, _data: Object = null, _onComplete: Function = null, _onError: Function = null, _target: any = null) {\r\n//         this.sHttpObjectPool.regObject(this);\r\n//         let _http: Http = this.sHttpObjectPool.getObject();\r\n//         _http.regCallBack(_onComplete, _onError, _target);\r\n//         _http.post(_url, _data);\r\n//         return _http;\r\n//     }\r\n//     /**[public | static] \r\n//      * GET方式请求\r\n//      * @param _url \r\n//      * @param _data \r\n//      * @param _onComplete \r\n//      * @param _onError \r\n//      * @param _target \r\n//      */\r\n//     public static GET(_url: string, _data: Object = null, _onComplete: Function = null, _onError: Function = null, _target: any = null) {\r\n//         this.sHttpObjectPool.regObject(this);\r\n//         let _http: Http = this.sHttpObjectPool.getObject();\r\n//         _http.regCallBack(_onComplete, _onError, _target);\r\n//         _http.get(_url, _data);\r\n//         return _http;\r\n//     }\r\n// }"]}