"use strict";
cc._RF.push(module, 'e43f9CadxRKgL53nT9zLCaU', 'Utils');
// Script/Shared/Utils.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var EnumManager_1 = require("../enum/EnumManager");
var GameInfo_1 = require("../Game/info/GameInfo");
var UserInfo_1 = require("../Game/info/UserInfo");
var TimeAndMoveManager_1 = require("../mgr/TimeAndMoveManager");
var LobbyMsgDef_1 = require("../proto/LobbyMsgDef");
var CreateRoomHelper_1 = require("../UI/createRoom/CreateRoomHelper");
var GloBal_1 = require("./GloBal");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var Utils = /** @class */ (function () {
    function Utils() {
        /**时间转换*/
        this.DAY_MS = 24 * 60 * 60 * 1000;
        this.ruleMapInfo = null;
    }
    Utils_1 = Utils;
    Object.defineProperty(Utils, "ins", {
        get: function () {
            return this._ins || (this._ins = new Utils_1());
        },
        enumerable: false,
        configurable: true
    });
    /**调试统一输入路劲,方便后期屏蔽*/
    Utils.prototype.debugOutput = function () {
        var data = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            data[_i] = arguments[_i];
        }
        var str = data.length > 1 ? "" : data[0];
        if (str == "") {
            for (var i = 0; i < data.length; i++) {
                str += data[i];
            }
        }
        console.log(str);
    };
    /**输出对象*/
    Utils.prototype.debugObj = function (str, obj) {
        console.log(str);
        for (var key in obj) {
            console.log(key + "=" + obj[key]);
        }
    };
    /**暂时的弹窗或者提示类输出,后续会调用相对一的提示提示接口*/
    Utils.prototype.dialogOutput = function (data) {
        console.log(data);
        //TODO   调用提示对应接口
    };
    /**获取时间日期格式*/
    Utils.prototype.getDataFormat = function (data) {
        var format;
        var date = {
            "M+": data.getMonth() + 1,
            "d+": data.getDate(),
            "h+": data.getHours(),
            "m+": data.getMinutes(),
            "s+": data.getSeconds(),
            "q+": Math.floor((data.getMonth() + 3) / 3),
            "S+": data.getMilliseconds()
        };
        if (/(y+)/i.test(format)) {
            format = format.replace(RegExp.$1, (data.getFullYear() + '').substr(4 - RegExp.$1.length));
        }
        for (var k in date) {
            if (new RegExp("(" + k + ")").test(format)) {
                format = format.replace(RegExp.$1, RegExp.$1.length === 1
                    ? date[k] : ("00" + date[k]).substr(("" + date[k]).length));
            }
        }
        return format;
    };
    Utils.prototype.getPreFabBySource = function (source, type) {
        if (type === void 0) { type = cc.Prefab; }
        return cc.resources.get(source, type);
    };
    /*克隆**/
    Utils.prototype.clone = function (origin) {
        if (!origin) {
            return;
        }
        var obj = {};
        for (var f in origin) {
            if (origin.hasOwnProperty(f)) {
                obj[f] = origin[f];
            }
        }
        return obj;
    };
    ;
    /**克隆数组*/
    Utils.prototype.cloneArr = function (arr) {
        var newArr = [];
        for (var i = 0; i < arr.length; i++) {
            newArr[i] = arr[i];
        }
        return newArr;
    };
    /**长度*/
    Utils.prototype.size = function (obj) {
        if (!obj) {
            return 0;
        }
        var size = 0;
        for (var f in obj) {
            if (obj.hasOwnProperty(f)) {
                size++;
            }
        }
        return size;
    };
    ;
    /***长度*/
    Utils.prototype.getLength = function (obj) {
        var total = 0;
        for (var k in obj) {
            total++;
        }
        return total;
    };
    /**空对象*/
    Utils.prototype.isEmptyObject = function (obj) {
        for (var name in obj) {
            return false;
        }
        return true;
    };
    ;
    /**格式*/
    Utils.prototype.isPositiveInteger = function (num) {
        var r = /^[1-9][0-9]*$/;
        return r.test(num);
    };
    ;
    /**IP转换*/
    Utils.prototype.ipToInt = function (ip) {
        var parts = ip.split(".");
        if (parts.length != 4) {
            return 0;
        }
        return (parseInt(parts[0], 10) << 24
            | parseInt(parts[1], 10) << 16
            | parseInt(parts[2], 10) << 8
            | parseInt(parts[3], 10)) >>> 0;
    };
    ;
    /**基础随机*/
    Utils.prototype.getRandomNum = function (Min, Max) {
        var Range = Max - Min;
        var Rand = Math.random();
        return (Min + Math.round(Rand * Range));
    };
    ;
    /**转换*/
    Utils.prototype.userId2Number = function (userId) {
        var hash = 5381, i = userId.length;
        while (i)
            hash = (hash * 33) ^ userId.charCodeAt(--i);
        /* JavaScript does bitwise operations (like XOR, above) on 32-bit signed
         * integers. Since we want the results to be always positive, convert the
         * signed int to an unsigned by doing an unsigned bitshift. */
        return Number(hash >>> 0);
    };
    ;
    Utils.prototype.getIntervalDay = function (time1, time2) {
        return Math.abs((Math.floor(time1 / this.DAY_MS) - Math.floor(time2 / this.DAY_MS)));
    };
    ;
    /**使数字保留count个小数位*/
    Utils.prototype.numToFixed = function (number, count) {
        var count_ = count || 2;
        return parseFloat(parseFloat(number).toFixed(count_));
    };
    ;
    /**生成随机字符串*/
    Utils.prototype.randomString = function (len) {
        len = len || 16;
        var chars = 'ABCDEFGHJKMNPQRSTWXYZabcdefhijkmnprstwxyz2345678'; /****默认去掉了容易混淆的字符oOLl,9gq,Vv,Uu,I1****/
        var maxPos = chars.length;
        var pwd = '';
        for (var i = 0; i < len; i++) {
            pwd += chars.charAt(Math.floor(Math.random() * maxPos));
        }
        return pwd;
    };
    ;
    /**获取单位向量*/
    Utils.prototype.getUnitVector = function (startPoint, endPoint) {
        var point = cc.v2(0, 0);
        var distance;
        distance = Math.pow((startPoint.x - endPoint.x), 2) + Math.pow((startPoint.y - endPoint.y), 2);
        distance = Math.sqrt(distance);
        if (distance === 0)
            return point;
        point.x = (endPoint.x - startPoint.x) / distance;
        point.y = (endPoint.y - startPoint.y) / distance;
        return point;
    };
    ;
    /**修改图片*/
    Utils.prototype.setNewImageToSprite = function (sprite, url, cb) {
        if (cb === void 0) { cb = null; }
        cc.loader.loadRes(url, cc.SpriteFrame, null, function (err, res) {
            if (err) {
                console.error("image err" + err);
            }
            sprite.spriteFrame = res;
            if (cb) {
                Utils_1.ins.invokeCallback(cb);
            }
        });
    };
    /***通过游戏类型获取最大游戏人数*/
    Utils.prototype.getMaxPlayerByGameType = function (roomType) {
        switch (roomType) {
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenSanFang:
                return 4;
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenLiangFang:
                return 4;
            case LobbyMsgDef_1.GameRoomTypeEnum.SanRenLiangFang:
                return 3;
            case LobbyMsgDef_1.GameRoomTypeEnum.LiangRenMaJiang:
                return 2;
        }
    };
    /***通过游戏类型获取最大麻将张数*/
    Utils.prototype.getMaxMajiongByGameType = function (roomType) {
        switch (roomType) {
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenSanFang:
                return 108;
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenLiangFang:
                return 72;
            case LobbyMsgDef_1.GameRoomTypeEnum.SanRenLiangFang:
                return 72;
            case LobbyMsgDef_1.GameRoomTypeEnum.LiangRenMaJiang:
                return 72;
        }
    };
    /***通过游戏类型获取最大牌墙的基础排列*/
    Utils.prototype.getMajiongWallByGameType = function (roomType) {
        switch (roomType) {
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenSanFang:
                return [28, 26, 28, 26];
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenLiangFang:
                return [];
            case LobbyMsgDef_1.GameRoomTypeEnum.SanRenLiangFang:
                return [];
            case LobbyMsgDef_1.GameRoomTypeEnum.LiangRenMaJiang:
                return [];
        }
    };
    /***通过游戏类型获取游戏名字*/
    Utils.prototype.getGameNameByGameType = function (roomType) {
        switch (roomType) {
            case LobbyMsgDef_1.GamePlayTypeEnum.HuanSanZhang:
                return "换三张";
            case LobbyMsgDef_1.GamePlayTypeEnum.XueZhanDaoDi:
                return "血战到底";
        }
    };
    /***通过游戏类型获取游戏名字*/
    Utils.prototype.getGameTypeNameByGameType = function (roomType) {
        switch (roomType) {
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenSanFang:
                return "四人三房";
            case LobbyMsgDef_1.GameRoomTypeEnum.SiRenLiangFang:
                return "四人两房";
            case LobbyMsgDef_1.GameRoomTypeEnum.SanRenLiangFang:
                return "三人两房";
            case LobbyMsgDef_1.GameRoomTypeEnum.LiangRenMaJiang:
                return "两人两房";
        }
    };
    /**
     * 创建一个预制体对象
     * @param file 路径
     * @param parent 父对象
     * @param parm : 参数
     * @param point : 位置
     * @param cb 回调
    */
    Utils.prototype.createObjToNode = function (file, parent, parm, point, cb) {
        if (point === void 0) { point = cc.v2(0, 0); }
        if (cb === void 0) { cb = null; }
        console.log("Utils ==> createObjToNode , file:", file);
        var arr = file.split('/');
        var dialogType = arr[arr.length - 1];
        cc.loader.loadRes(file, function (err, data) {
            if (!!err) {
                cc.error(err);
                Utils_1.ins.invokeCallback(cb, err);
            }
            else {
                var createObj = cc.instantiate(data);
                createObj.getComponent(dialogType).dialogParameters = parm;
                createObj.getComponent(dialogType).isDestroy = false;
                createObj.parent = parent;
                createObj.x = point.x;
                createObj.y = point.y;
                Utils_1.ins.invokeCallback(cb, null, createObj);
            }
        }.bind(this));
    };
    /** 截取英文字符的长度*/
    Utils.prototype.getStringByRealLength = function (str, length) {
        var realLength = 0;
        for (var i = 0; i < str.length; ++i) {
            var count = str.charCodeAt(i);
            if (count >= 0 && count <= 128) {
                ++realLength;
            }
            else {
                realLength += 2;
            }
            if (realLength >= length) {
                break;
            }
        }
        return str.substring(0, realLength + 1);
    };
    ;
    /**获得从m中取n的所有组合*/
    Utils.prototype.getCombinationFlagArrs = function (m, n) {
        if (!n || n < 1 || m < n) {
            return [];
        }
        if (m === n) {
            return [[1, 1]];
        }
        var resultArrs = [], flagArr = [], isEnd = false, i, j, leftCnt;
        for (i = 0; i < m; i++) {
            flagArr[i] = i < n ? 1 : 0;
        }
        resultArrs.push(flagArr.concat());
        while (!isEnd) {
            leftCnt = 0;
            for (i = 0; i < m - 1; i++) {
                if (flagArr[i] === 1 && flagArr[i + 1] === 0) {
                    for (j = 0; j < i; j++) {
                        flagArr[j] = j < leftCnt ? 1 : 0;
                    }
                    flagArr[i] = 0;
                    flagArr[i + 1] = 1;
                    var aTmp = flagArr.concat();
                    resultArrs.push(aTmp);
                    if (aTmp.slice(-n).join("").indexOf('0') === -1) {
                        isEnd = true;
                    }
                    break;
                }
                flagArr[i] === 1 && leftCnt++;
            }
        }
        return resultArrs;
    };
    ;
    Utils.prototype.stringFormat = function () {
        if (arguments.length === 0)
            return null;
        var str = arguments[0];
        for (var i = 1; i < arguments.length; i++) {
            var re = new RegExp('\\{' + (i - 1) + '\\}', 'gm');
            str = str.replace(re, arguments[i]);
        }
        return str;
    };
    ;
    Utils.prototype.getFileName = function (stack) {
        return stack[1].getFileName();
    };
    Utils.prototype.getLineNumber = function (stack) {
        return stack[1].getLineNumber();
    };
    /**
     * Check and invoke callback function
     */
    Utils.prototype.invokeCallback = function (cb) {
        var agrs = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            agrs[_i - 1] = arguments[_i];
        }
        if (!!cb && typeof cb === 'function') {
            cb.apply(null, Array.prototype.slice.call(arguments, 1));
        }
    };
    ;
    Utils.prototype.getCardStrByValue = function (value) {
        var str = "";
        var ten = Math.floor(value / 10);
        var one = value % 10;
        str = ten + "_" + one;
        return str;
    };
    /**获取某一张牌是否是定缺牌*/
    Utils.prototype.getIsDice = function (value, type) {
        return Math.floor(value / 10) == type;
    };
    Utils.prototype.compare = function (a, b) {
        if (a < b) {
            return -1;
        }
        else if (a > b) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Utils.prototype.compareV2 = function (a, b) {
        if (a.x < b.x) {
            return -1;
        }
        else if (a.x > b.x) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Utils.prototype.compareX = function (a, b) {
        if (a.node.x < b.node.x) {
            return -1;
        }
        else if (a.node.x > b.node.x) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Utils.prototype.compareY = function (a, b) {
        if (a.node.y > b.node.y) {
            return -1;
        }
        else if (a.node.y < b.node.y) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Utils.prototype.compareLight = function (a, b) {
        if (a.cardLight < b.cardLight) {
            return -1;
        }
        else if (a.cardLight > b.cardLight) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Utils.prototype.compareValue = function (a, b) {
        if (a.cardValue < b.cardValue) {
            return -1;
        }
        else if (a.cardValue > b.cardValue) {
            return 1;
        }
        else {
            return 0;
        }
    };
    Utils.prototype.getOutType = function (isGang, fromeNum, eatNum, isHave, haveEatType) {
        console.log("isGang=" + isGang);
        console.log("fromeNum=" + fromeNum);
        console.log("eatNum=" + eatNum);
        console.log("isHave=" + isHave);
        console.log("haveEatType=" + haveEatType);
        var num = (fromeNum - eatNum + 40) % GloBal_1.Global.Utils.getMaxPlayerByGameType(GameInfo_1.default.ins.roomTableInfo.rule.roomType);
        if (isHave) {
            if (haveEatType == EnumManager_1.EatCardEnum.EatUp) {
                return EnumManager_1.EatCardEnum.CrossAllUp;
            }
            if (haveEatType == EnumManager_1.EatCardEnum.EatDown) {
                return EnumManager_1.EatCardEnum.CrossAllDown;
            }
            if (haveEatType == EnumManager_1.EatCardEnum.EatOpposite) {
                return EnumManager_1.EatCardEnum.CrossAllOpp;
            }
        }
        if (isGang == 0) {
            switch (num) {
                case 0:
                    return EnumManager_1.EatCardEnum.EndValue;
                case 1:
                    return EnumManager_1.EatCardEnum.EatDown;
                case 2:
                    return EnumManager_1.EatCardEnum.EatOpposite;
                case 3:
                    return EnumManager_1.EatCardEnum.EatUp;
            }
        }
        else {
            switch (num) {
                case 0:
                    return EnumManager_1.EatCardEnum.CrossSelf;
                case 1:
                    return EnumManager_1.EatCardEnum.CrossDown;
                case 2:
                    return EnumManager_1.EatCardEnum.CrossOpposite;
                case 3:
                    return EnumManager_1.EatCardEnum.CrossUp;
            }
        }
        return EnumManager_1.EatCardEnum.EndValue;
    };
    Utils.prototype.webCopyString = function (str, cb) {
        var input = str + '';
        var el = document.createElement('textarea');
        el.value = input;
        el.setAttribute('readonly', '');
        el.style.position = 'absolute';
        el.style.left = '-9999px';
        el.style.fontSize = '12pt';
        var selection = getSelection();
        var originalRange = null;
        if (selection.rangeCount > 0) {
            originalRange = selection.getRangeAt(0);
        }
        document.body.appendChild(el);
        el.select();
        el.selectionStart = 0;
        el.selectionEnd = input.length;
        var success = false;
        try {
            success = document.execCommand('copy');
        }
        catch (err) {
        }
        document.body.removeChild(el);
        if (originalRange) {
            selection.removeAllRanges();
            selection.addRange(originalRange);
        }
        cb && cb(success);
        if (success) {
            console.log("复制成功");
        }
        else {
            console.log("复制失败");
        }
        return success;
    };
    Utils.prototype.getMaJiangValue = function (id) {
        var mj = "";
        var num = id % 10;
        var type = Math.floor(id / 10);
        if (type == 0) {
            mj = num + "万";
        }
        else if (type == 1) {
            mj = num + "条";
        }
        else if (type == 2) {
            mj = num + "筒";
        }
        return mj;
    };
    Utils.prototype.showPanelAction = function (panel, point, time) {
        if (time === void 0) { time = 0; }
        cc.tween(panel).to(time ? time : TimeAndMoveManager_1.default.ins.showPanelTime, { x: point.x, y: point.y }).start();
    };
    Utils.prototype.hidePanelAction = function (panel, point, callBack, thisObj, time) {
        if (time === void 0) { time = 0; }
        cc.tween(panel).to(time ? time : TimeAndMoveManager_1.default.ins.showPanelTime, { x: point.x, y: point.y }).call(function () {
            callBack.bind(thisObj)();
        }).start();
    };
    Utils.prototype.setGray = function (sprite, isAdd) {
        var meta = cc.Material.getBuiltinMaterial("builtin-2d-sprite");
        if (isAdd) {
            meta = cc.Material.getBuiltinMaterial("builtin-2d-gray-sprite");
        }
        sprite.setMaterial(0, meta);
    };
    Utils.prototype.showWait = function () {
    };
    Utils.prototype.hideWait = function () {
    };
    Utils.prototype.playSound = function (resource, isLoop, voice) {
        if (isLoop === void 0) { isLoop = false; }
        if (voice === void 0) { voice = 1; }
        /**测试时候避免声音重复,所以目前只播放庄家相关的声音*/
        if (UserInfo_1.default.ins.mySitIndex != GameInfo_1.default.ins.nowBookMakerSit) {
            return;
        }
        cc.loader.loadRes(resource, function (err, clip) {
            if (!!err) { }
            else {
                cc.audioEngine.play(clip, isLoop, voice);
            }
        });
    };
    Utils.prototype.getSoundRandom = function () {
        var math = Math.random() * 100;
        return Math.floor(math / 25) + 1;
    };
    Utils.prototype.getNeedByRule = function (ruleInfo) {
        var initUse = CreateRoomHelper_1.default.ins.openRoomUseGlod[CreateRoomHelper_1.GameOenRoomUseEnum.Base - 1].createPlayerUse;
        var mut = ruleInfo.handsCnt / 8;
        if (ruleInfo.baozi >= LobbyMsgDef_1.GamePiaoTypeEnum.ZhuangJiaBiPiao) {
            initUse += CreateRoomHelper_1.default.ins.openRoomUseGlod[CreateRoomHelper_1.GameOenRoomUseEnum.Piao - 1].createPlayerUse;
        }
        if (ruleInfo.haveHorse > 0) {
            initUse += CreateRoomHelper_1.default.ins.openRoomUseGlod[CreateRoomHelper_1.GameOenRoomUseEnum.BuyHorse - 1].createPlayerUse;
            if (ruleInfo.isSelectBankerBuyHorse) {
                initUse += CreateRoomHelper_1.default.ins.openRoomUseGlod[CreateRoomHelper_1.GameOenRoomUseEnum.BankerBuyHorse - 1].createPlayerUse;
            }
        }
        return initUse;
    };
    Utils.prototype.formNumToGivenStr = function (_str, _strArr) {
        var str = "";
        for (var index = 0; index < _strArr.length; index++) {
            str = _str.replace("{" + index + "}", _strArr[index]);
        }
        return str;
    };
    Utils.prototype.getlocalStorageItem = function (name) {
        return cc.sys.localStorage.getItem(name);
    };
    Utils.prototype.addlocalStorageItem = function (name, value) {
        return cc.sys.localStorage.setItem(name, value);
    };
    Utils.prototype.getRoomTableInfoStr = function (rule) {
        var str = "规则:";
        var ruleMapInfo = this.getRuleMapInfo();
        if (rule.ceiling) {
            str += GloBal_1.Global.Utils.formNumToGivenStr(ruleMapInfo[EnumManager_1.GameRuleTypeEnum.FengDing][0], [rule.ceiling.toString()]) + "、";
        }
        if (rule.zmType) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZiMo][rule.zmType] + "、";
        }
        if (rule.tiFan) {
            str += GloBal_1.Global.Utils.formNumToGivenStr(ruleMapInfo[EnumManager_1.GameRuleTypeEnum.TiFan][0], [rule.tiFan.toString()]) + "、";
        }
        if (rule.dianGangHua) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.DianGangHua][rule.dianGangHua] + "、";
        }
        if (rule.sunshine) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ShaiTaiYang][rule.sunshine] + "、";
        }
        if (rule.baozi) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.Baozi][rule.baozi] + "、";
        }
        if (rule.baoziDouble) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ShuangBao][0] + "、";
        }
        if (rule.caGua) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.BaoYu][0] + "、";
        }
        if (rule.jiShiYu) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.JiShiYu][0] + "、";
        }
        if (rule.allGangShift) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.LiangGangTongChuan][0] + "、";
        }
        if (rule.menqing) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.MenQing][0] + "、";
        }
        if (rule.zhongzhang) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZhongZhang][0] + "、";
        }
        if (rule.yao9) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.YaoJiu][0] + "、";
        }
        if (rule.jiangdui) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.JiangDui][0] + "、";
        }
        if (rule.tdHu) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.TianDiHu][0] + "、";
        }
        if (rule.jiaxin5) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.JiaXinWu][0] + "、";
        }
        if (rule.lunZhuang) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.LunZhuang][0] + "、";
        }
        if (rule.passHu) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.GuoShouHu][0] + "、";
        }
        if (rule.hu2Score) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.LiangFenQiHu][0] + "、";
        }
        if (rule.last4Hu) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZuiHouSiZhang][0] + "、";
        }
        if (rule.findMaxHu) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ChaDaHu][0] + "、";
        }
        if (rule.zmOpen) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZiMoLiangPai][0] + "、";
        }
        if (rule.realTimeCalc) {
            str += ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ShiShiJieSuan][0] + "、";
        }
        str = str.slice(0, str.length - 1);
        return str;
    };
    Utils.prototype.getRuleMapInfo = function () {
        if (this.ruleMapInfo) {
            return this.ruleMapInfo;
        }
        this.ruleMapInfo = {};
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.FengDing] = ["封顶{0}倍"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZiMo] = ["", "自摸加番", "自摸加底"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.GameType] = ["", "血战", "换三张"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.Baozi] = ["", "豹子", "甩飘", "庄家必飘"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ShuangBao] = ["双豹"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.BaoYu] = ["暴雨"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.JiShiYu] = ["及时雨"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.LiangGangTongChuan] = ["连杠通转"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.MenQing] = ["门清"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZhongZhang] = ["中张"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.YaoJiu] = ["幺九"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.JiangDui] = ["将对"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.TianDiHu] = ["天地胡"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.JiaXinWu] = ["夹心五"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.LunZhuang] = ["轮庄"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.TiFan] = ["梯番{0}倍"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.GuoShouHu] = ["过手胡"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.LiangFenQiHu] = ["两分起胡"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZuiHouSiZhang] = ["最后四张必胡"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ChaDaHu] = ["查大叫"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.DianGangHua] = ["", "点杠花(自摸)", "点杠花(点炮)"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ShaiTaiYang] = ["", "晒太阳", "晒太阳(反雨)"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ZiMoLiangPai] = ["自摸亮牌"];
        this.ruleMapInfo[EnumManager_1.GameRuleTypeEnum.ShiShiJieSuan] = ["实时结算"];
        return this.ruleMapInfo;
    };
    var Utils_1;
    Utils = Utils_1 = __decorate([
        ccclass
    ], Utils);
    return Utils;
}());
exports.default = Utils;

cc._RF.pop();