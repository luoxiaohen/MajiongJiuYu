{"version":3,"sources":["assets\\Script\\com\\SocketAdapter.ts"],"names":[],"mappings":";;;;;;;AAAA,2CAA0C;AAM1C;;EAEE;AACF;IAAA;IAiFA,CAAC;IA7EG;;OAEG;IACH,8BAAM,GAAN,UAAO,OAAe;QAClB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,2BAA2B;QAC3B,wCAAwC;IAC5C,CAAC;IACD;;OAEG;IACH,+BAAO,GAAP,UAAQ,IAAY;QAChB,OAAO,CAAC,GAAG,CAAC,cAAc,GAAG,IAAI,CAAC,CAAC;QACnC,6BAA6B;IACjC,CAAC;IACD;;OAEG;IACH,+BAAO,GAAP;QACI,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,uBAAuB;IAC3B,CAAC;IACD;;;OAGG;IACH,mCAAW,GAAX,UAAY,YAAqB;QAC7B,OAAO,CAAC,GAAG,CAAC,0BAA0B,GAAG,YAAY,CAAC,CAAC;IAC3D,CAAC;IAED;;OAEG;IACH,8BAAM,GAAN,UAAO,GAAQ;QACX,IAAI,GAAG,GAAU,CAAC,CAAC;QACzB,IAAI,GAAG,GAAU,CAAC,CAAC;QACnB,IAAI;YACH,wBAAwB;YACxB,IAAI,IAAI,GAAW,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;YACjC,IAAI,IAAI,IAAI,GAAG,EAAE;gBAChB,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACxB,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;gBACZ,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;gBACZ,IAAI,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,IAAE,EAAE,CAAC,GAAC,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,EAAE;iBAChD;aACD;iBACI,IAAI,IAAI,IAAI,GAAG,EAAE;gBACrB,IAAI,MAAM,GAAW,GAAG,CAAC,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;aAClD;SACD;QAAC,OAAO,CAAC,EAAE;YACX,IAAI,MAAM,GAAG,CAAC,CAAC,OAAO,CAAC;YACvB,IAAI,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC;YACvB,IAAI,IAAI,GAAG,IAAI,IAAI,EAAE,CAAC;YACtB,IAAI,OAAO,GAAM,IAAI,CAAC,WAAW,EAAE,UAAI,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,UAAI,IAAI,CAAC,OAAO,EAAE,SAAI,IAAI,CAAC,QAAQ,EAAE,SAAI,IAAI,CAAC,UAAU,EAAE,SAAI,IAAI,CAAC,UAAU,EAAI,CAAC;YAC5I,IAAI,MAAM,GAAG,6CAAkB,OAAO,mCAAU,MAAM,yBAAU,GAAG,SAAI,GAAG,yBAAU,QAAU,CAAC;YAC/F,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;SACtB;IACC,CAAC;IACD,OAAO;IACH,6BAAK,GAAZ,UAAa,EAAU,EAAE,GAAW;QACnC,eAAM,CAAC,GAAG,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAC,GAAG,CAAC,CAAC;QAC3C,YAAY;QACZ,uBAAuB;QACvB,sCAAsC;QACtC,iBAAiB;QACjB,KAAK;QACL,IAAI;QACJ,OAAO,KAAK,CAAC;IACd,CAAC;IACE;;OAEG;IACH,yCAAiB,GAAjB,UAAkB,KAAU;QACxB,IAAI,SAAS,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;QACtC,eAAM,CAAC,KAAK,CAAC,WAAW,CAAC,QAAQ,GAAG,SAAS,GAAI,QAAQ,CAAC,CAAC;QAC3D,OAAO,SAAS,CAAC;IACrB,CAAC;IACL,oBAAC;AAAD,CAjFA,AAiFC,IAAA;AAjFY,sCAAa;AAmF1B;IAAA;IAIA,CAAC;IAAD,cAAC;AAAD,CAJA,AAIC,IAAA;AAJY,0BAAO","file":"","sourceRoot":"/","sourcesContent":["import { Global } from \"../Shared/GloBal\";\r\nimport { ISocketAgent } from \"./socket/ISocketAgent\";\r\nimport { Socket } from \"./socket/Socket\";\r\nimport { SocketManager } from \"./socket/SocketManager\";\r\n\r\n\r\n/**\r\n* socket服务器适配器\r\n*/\r\nexport class SocketAdapter implements ISocketAgent {\r\n    type: string;\r\n    private mSocket: Socket;\r\n    private mPU:any;\r\n    /**\r\n     * 初始化\r\n     */\r\n    onInit(_socket: Socket) {\r\n        this.mSocket = _socket;\r\n        // this.mPU = window[\"pu\"];\r\n        // this.mPU.crypto = window[\"CryptoJS\"];\r\n    }\r\n    /**\r\n     * 发生错误时\r\n     */\r\n    onError(_msg: string) {\r\n        console.log(\"connect fail\" + _msg);\r\n        //nk.Toast.show(\"连接失败\"+_msg);\r\n    }\r\n    /**\r\n     * 连接关闭\r\n     */\r\n    onClose() {\r\n        console.log(\"connect close\");\r\n        //nk.Toast.show(\"连接关闭\")\r\n    }\r\n    /**\r\n     * 连接成功\r\n     * _isReconnect 是否是重连状态\r\n     */\r\n    onConnected(_isReconnect: boolean) {\r\n        console.log(\"connected _isReconnect  \" + _isReconnect);\r\n    }\r\n\r\n    /**\r\n     * 接收到数据\r\n     */\r\n    onData(msg: any) {\r\n        var sid:number = 0;\r\n\t\tvar mid:number = 0;\r\n\t\ttry {\r\n\t\t\t// msg = this.readUTF();\r\n\t\t\tvar cCMD: string = msg.charAt(0);\r\n\t\t\tif (cCMD == \"{\") {\r\n\t\t\t\tvar s = JSON.parse(msg);\r\n\t\t\t\tmid = s.mid;\r\n\t\t\t\tsid = s.sid;\r\n\t\t\t\tif (false == this.DoMsg((s.mid<<16)+s.sid, msg)) {\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\telse if (cCMD == \"P\") {\r\n\t\t\t\tvar subMsg: string = msg.substring(1, msg.length);\r\n\t\t\t}\r\n\t\t} catch (e) {\t\r\n\t\t\tlet errMsg = e.message;\r\n\t\t\tlet errStack = e.stack;\r\n\t\t\tlet date = new Date();\r\n\t\t\tlet dateStr = `${date.getFullYear()}-${date.getMonth() + 1}-${date.getDate()} ${date.getHours()}:${date.getMinutes()}:${date.getSeconds()}`;\r\n\t\t\tlet format = `T_Mahj-异常：\\n时间:${dateStr}\\n错误信息:${errMsg}\\n协议:\\n${mid},${sid}\\n堆栈:\\n${errStack}`;\r\n\t\t\tconsole.error(format);\r\n\t\t}\r\n    }\r\n    // 消息分派\r\n\tpublic DoMsg(id: number, str: string): Boolean {\r\n\t\tGlobal.mgr.socketMgr.notifyReceive(id,str);\r\n\t\t// if(data){\r\n\t\t// \tif (data != null) {\r\n\t\t// \t\tdata.func.call(data.target, str);\r\n\t\t// \t\treturn true;\r\n\t\t// \t}\r\n\t\t// }\r\n\t\treturn false;\r\n\t}\r\n    /**\r\n     * 打包发送的socket数据 并返回\r\n     */\r\n    onPackageSendData(_data: any): string {\r\n        let _sendData = JSON.stringify(_data);\r\n        Global.Utils.debugOutput(`send: ` + _sendData +  \"socket\");\r\n        return _sendData;\r\n    }\r\n}\r\n\r\nexport class FuncMap {\r\n\tpublic id: number;\r\n\tpublic target: any;\r\n\tpublic func: (string) => void;\r\n}"]}