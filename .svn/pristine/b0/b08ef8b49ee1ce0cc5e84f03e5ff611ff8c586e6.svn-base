{"version":3,"sources":["assets\\Script\\com\\socket\\Socket.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["\r\nimport { Global } from \"../../Shared/GloBal\";\r\nimport { CallBack } from \"../CallBack\";\r\nimport { ISocketAgent } from \"./ISocketAgent\";\r\nimport { SocketEvent } from \"./SocketEvent\";\r\n\r\n/**\r\n * socket连接\r\n */\r\nexport class Socket {\r\n\tprivate mSocket: WebSocket;\r\n\tprivate mSocketType: number;\r\n\tprivate mUrl: string;\r\n\tprivate mWssCacertPath:string;\r\n\tprivate mAgent: ISocketAgent;\r\n\tprivate mIsReconnect: boolean;\r\n\tprivate mIsConnected:boolean;\r\n\tprivate mReceiveLib: Object = {};\r\n\tpublic constructor(_type: number, _agent: ISocketAgent) {\r\n\t\tthis.mSocketType = _type;\r\n\t\tthis.mAgent = _agent;\r\n\t\tthis.mAgent.onInit(this);\r\n\r\n\t}\r\n\tprivate onConnectedHandler(e: Event) {\r\n\t\tGlobal.Utils.debugOutput(\"socket ==> 连接成功\");\r\n\t\tthis.mIsConnected = true;\r\n\t\tthis.mAgent.onConnected(this.mIsReconnect);\r\n\t\tlet _eventType: string = this.mIsReconnect ? SocketEvent.RECONNECTED : SocketEvent.CONNECTED;\r\n\t\tcc.systemEvent.emit(_eventType,_eventType);\r\n\t}\r\n\tprivate onCloseHandler(e: CloseEvent) {\r\n\t\tGlobal.Utils.debugOutput(\"socket ==> 连接关闭\");\r\n\t\tthis.mIsConnected = false;\r\n\t\tthis.mAgent.onClose();\r\n\t\tcc.systemEvent.emit(SocketEvent.CLOSE, SocketEvent.CLOSE);\r\n\t}\r\n\tprivate onErrorHandler(e: ErrorEvent) {\r\n\t\tGlobal.Utils.debugOutput(\"socket ==> 连接错误\" + e.message);\r\n\t\tthis.mIsConnected = false;\r\n\t\tthis.mAgent.onError(e.message);\r\n\t\tcc.systemEvent.emit(SocketEvent.ERROR,SocketEvent.ERROR);\r\n\t}\r\n\tprivate onSocketDataHandler(e: MessageEvent) {\r\n\t\tGlobal.Utils.debugOutput(\"socket ==> 消息回来\" + e.data);\r\n\t\tthis.mAgent.onData(e.data);\r\n\t\tcc.systemEvent.emit(SocketEvent.MESSAGE, SocketEvent.MESSAGE,e.data);\r\n\t}\r\n\t/**[public] \r\n\t * 发送数据\r\n\t * * ..._datas \r\n\t */\r\n\tpublic send(..._datas) {\r\n\t\tlet _tmpDatas: any = this.mAgent.onPackageSendData.apply(this.mAgent, _datas);\r\n\t\tif (this.connected) {\r\n\t\t\tif (typeof _tmpDatas != \"string\") {\r\n\t\t\t\t_tmpDatas = JSON.stringify(_tmpDatas);\r\n\t\t\t}\r\n\t\t\tthis.mSocket.send(_tmpDatas);\r\n\t\t} else {\r\n\t\t\tcc.log(\"socket error\");\r\n\t\t}\r\n\t}\r\n\t/**[public] \r\n\t * 添加通知回调\r\n\t * @param _id \r\n\t * @param _handler \r\n\t * @param _target \r\n\t */\r\n\tpublic addReceiveNotify(_mid: number,_sid:number ,_handler: Function, _target: any, _socketType: number = -1) {\r\n\t\tlet _id : number = (_mid<<16)+_sid\r\n\t\tlet _receives: CallBack[] = this.mReceiveLib[_id] || [];\r\n\t\tlet _count: number = _receives.length;\r\n\t\tfor (let i: number = 0; i < _count; i++) {\r\n\t\t\tif (_receives[i].checkEqual(_handler, _target)) {\r\n\t\t\t\tCallBack.unbind(_receives.splice(i, 1)[0]);\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tthis.mReceiveLib[_id] = _receives;\r\n\t\t_receives.push(CallBack.bind(_handler, _target));\r\n\t}\r\n\t/**\r\n\t * 移除某个对象中所有的通知回调\r\n\t * @param _target \r\n\t */\r\n\tpublic removeReceiveNotify(_target: any) {\r\n\t\tfor (let _id in this.mReceiveLib) {\r\n\t\t\tlet _receives: CallBack[] = this.mReceiveLib[_id];\r\n\t\t\tlet _count = _receives.length;\r\n\t\t\tfor (let i: number = 0; i < _count; i++) {\r\n\t\t\t\tlet _caller = _receives[i];\r\n\t\t\t\tif (_caller.equalTarget(_target)) {\r\n\t\t\t\t\t_receives.splice(i, 1);\r\n\t\t\t\t\tCallBack.unbind(_caller);\r\n\t\t\t\t\t_count--; i--;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t/**[public] \r\n\t * 广播通知\r\n\t * @param _id \r\n\t * @param _data \r\n\t */\r\n\tpublic notifyReceive(_id: any, _data: any): boolean {\r\n\t\tlet _caller: CallBack[] = this.mReceiveLib[_id];\r\n\t\tif (_caller) {\r\n\t\t\t_caller.forEach((value) => {\r\n\t\t\t\tvalue.excute(_data);\r\n\t\t\t});\r\n\t\t}\r\n\t\treturn _caller && !_caller.length;\r\n\t}\r\n\t/**[public] \r\n\t * 开始连接\r\n\t * @param _url \r\n\t */\r\n\tpublic startConnect(_url: string,_wssCacertPath:string) {\r\n\t\tthis.mIsReconnect = false;\r\n\t\tthis.mUrl = _url;\r\n\t\tthis.mWssCacertPath = _wssCacertPath;\r\n\t\tthis.connectByUrl(_url,_wssCacertPath);\r\n\t}\r\n\t/**[public] \r\n\t * 重连\r\n\t */\r\n\tpublic reconnect() {\r\n\t\tthis.mIsReconnect = true;\r\n\t\tthis.connected || this.connectByUrl(this.mUrl,this.mWssCacertPath);\r\n\t}\r\n\tpublic close(){\r\n\t\tif (this.connected) {\r\n\t\t\tthis.mSocket.close();\r\n\t\t\tthis.resetSocketListeners();\r\n\t\t}\r\n\t}\r\n\tpublic connectByUrl(_url: string,_wssCacertPath:string) {\r\n\t\tthis.mIsConnected = false;\r\n\t\tif( _wssCacertPath ){\r\n\t\t\tthis.mSocket = new WebSocket(_url,[],_wssCacertPath);\r\n\t\t}else{\r\n\t\t\tthis.mSocket = new WebSocket(_url,[]);\r\n\t\t}\r\n\t\tthis.mSocket.onopen = this.onConnectedHandler.bind(this);\r\n        this.mSocket.onmessage = this.onSocketDataHandler.bind(this);\r\n        this.mSocket.onclose = this.onCloseHandler.bind(this);\r\n        this.mSocket.onerror = this.onErrorHandler.bind(this);\r\n\t}\r\n\tpublic get url(): string {\r\n\t\treturn this.mUrl;\r\n\t}\r\n\tpublic get socketType(): number {\r\n\t\treturn this.mSocketType;\r\n\t}\r\n\tpublic get connected(){\r\n\t\treturn this.mIsConnected;\r\n\t}\r\n\t/**[public] \r\n\t * 销毁当前连接\r\n\t */\r\n\tpublic destory() {\r\n\t\tthis.resetSocketListeners();\r\n\t\tthis.mAgent = null;\r\n\t}\r\n\tprivate resetSocketListeners(){\r\n\t\tif( this.mSocket ){\r\n\t\t\tthis.mSocket.onopen = null;\r\n\t\t\tthis.mSocket.onmessage = null;\r\n\t\t\tthis.mSocket.onclose = null;\r\n\t\t\tthis.mSocket.onerror = null;\r\n\t\t}\r\n\t\tthis.mSocket = null;\r\n\t}\r\n}"]}