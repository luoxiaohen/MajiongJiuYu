"use strict";
cc._RF.push(module, 'b111d2A+TJLkag63fHbM64j', 'GetAddOrRemoveItem');
// Script/UI/createRoom/GetAddOrRemoveItem.ts

"use strict";
// Learn TypeScript:
//  - https://docs.cocos.com/creator/manual/en/scripting/typescript.html
// Learn Attribute:
//  - https://docs.cocos.com/creator/manual/en/scripting/reference/attributes.html
// Learn life-cycle callbacks:
//  - https://docs.cocos.com/creator/manual/en/scripting/life-cycle-callbacks.html
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
var UIBase_1 = require("../../UIBase");
var _a = cc._decorator, ccclass = _a.ccclass, property = _a.property;
var GetAddOrRemoveItem = /** @class */ (function (_super) {
    __extends(GetAddOrRemoveItem, _super);
    function GetAddOrRemoveItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.nameLabel = null;
        _this.handLabel = null;
        _this.handSubBtn = null;
        _this.handAddBtn = null;
        _this.valueArr = [];
        _this._currLv = 0;
        return _this;
    }
    Object.defineProperty(GetAddOrRemoveItem.prototype, "currLv", {
        get: function () {
            return this._currLv;
        },
        set: function (value) {
            this._currLv = value;
        },
        enumerable: false,
        configurable: true
    });
    GetAddOrRemoveItem.prototype.onLoad = function () {
    };
    GetAddOrRemoveItem.prototype.setData = function (valueArr, initLv, nameStr, callFun, thisObj) {
        if (callFun === void 0) { callFun = null; }
        if (thisObj === void 0) { thisObj = null; }
        this.valueArr = valueArr;
        this.currLv = initLv;
        this.createElements();
        this.nameLabel.string = nameStr;
        this.callFun = callFun;
        this.thisObj = thisObj;
    };
    GetAddOrRemoveItem.prototype.onAddClick = function () {
        if (this.currLv >= this.valueArr.length - 1) {
            return;
        }
        this.currLv++;
        this.showHandLabel();
        if (this.callFun) {
            this.callFun.bind(this.thisObj)();
        }
    };
    GetAddOrRemoveItem.prototype.onRemoveClick = function () {
        if (this.currLv <= 0) {
            return;
        }
        this.currLv--;
        this.showHandLabel();
        if (this.callFun) {
            this.callFun.bind(this.thisObj)();
        }
    };
    GetAddOrRemoveItem.prototype.createElements = function () {
        this.showHandLabel();
    };
    GetAddOrRemoveItem.prototype.showHandLabel = function () {
        this.handLabel.string = this.valueArr[this.currLv].toString();
    };
    __decorate([
        property(cc.Label)
    ], GetAddOrRemoveItem.prototype, "nameLabel", void 0);
    __decorate([
        property(cc.Label)
    ], GetAddOrRemoveItem.prototype, "handLabel", void 0);
    __decorate([
        property(cc.Button)
    ], GetAddOrRemoveItem.prototype, "handSubBtn", void 0);
    __decorate([
        property(cc.Button)
    ], GetAddOrRemoveItem.prototype, "handAddBtn", void 0);
    GetAddOrRemoveItem = __decorate([
        ccclass
    ], GetAddOrRemoveItem);
    return GetAddOrRemoveItem;
}(UIBase_1.default));
exports.default = GetAddOrRemoveItem;

cc._RF.pop();