{"version":3,"sources":["assets\\Script\\com\\http\\WebHttpRequest.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["// import { CommonEvent } from \"../../events/CommonEvent\";\r\n// import { HttpRequest } from \"./HttpRequest\";\r\n\r\n// /**\r\n//      * @private\r\n//      */\r\n// export class WebHttpRequest extends cc.EventTarget implements HttpRequest {\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     public constructor() {\r\n//         super();\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private _xhr: XMLHttpRequest;\r\n\r\n//     /**\r\n//      * \r\n//      */\r\n//     public timeout: number = 0;\r\n\r\n//     /**\r\n//      * @private\r\n//      * 本次请求返回的数据，数据类型根据responseType设置的值确定。\r\n//      */\r\n\r\n//     public get response(): any {\r\n//         if (!this._xhr) {\r\n//             return null;\r\n//         }\r\n\r\n//         if (this._xhr.response != undefined) {\r\n//             return this._xhr.response;\r\n//         }\r\n\r\n//         if (this._responseType == \"text\") {\r\n//             return this._xhr.responseText;\r\n//         }\r\n\r\n//         if (this._responseType == \"arraybuffer\" && /msie 9.0/i.test(navigator.userAgent)) {\r\n//             let w: any = window;\r\n//             return w.convertResponseBodyToText(this._xhr[\"responseBody\"]);\r\n//         }\r\n\r\n//         if (this._responseType == \"document\") {\r\n//             return this._xhr.responseXML;\r\n//         }\r\n\r\n//         /*if (this._xhr.responseXML) {\r\n//             return this._xhr.responseXML;\r\n//         }\r\n//         if (this._xhr.responseText != undefined) {\r\n//             return this._xhr.responseText;\r\n//         }*/\r\n//         return null;\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private _responseType: \"\" | \"arraybuffer\" | \"blob\" | \"document\" | \"json\" | \"text\";\r\n\r\n//     /**\r\n//      * @private\r\n//      * 设置返回的数据格式，请使用 HttpResponseType 里定义的枚举值。设置非法的值或不设置，都将使用HttpResponseType.TEXT。\r\n//      */\r\n//     public get responseType(): \"\" | \"arraybuffer\" | \"blob\" | \"document\" | \"json\" | \"text\" {\r\n//         return this._responseType;\r\n//     }\r\n\r\n//     public set responseType(value: \"\" | \"arraybuffer\" | \"blob\" | \"document\" | \"json\" | \"text\") {\r\n//         this._responseType = value;\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private _withCredentials: boolean;\r\n\r\n//     /**\r\n//      * @private\r\n//      * 表明在进行跨站(cross-site)的访问控制(Access-Control)请求时，是否使用认证信息(例如cookie或授权的header)。 默认为 false。(这个标志不会影响同站的请求)\r\n//      */\r\n//     public get withCredentials(): boolean {\r\n//         return this._withCredentials;\r\n//     }\r\n\r\n//     public set withCredentials(value: boolean) {\r\n//         this._withCredentials = value;\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private _url: string = \"\";\r\n//     private _method: string = \"\";\r\n\r\n//     /**\r\n//      * @private\r\n//      *\r\n//      * @returns\r\n//      */\r\n//     private getXHR(): any {\r\n//         if (window[\"XMLHttpRequest\"]) {\r\n//             return new window[\"XMLHttpRequest\"]();\r\n//         } else {\r\n//             return new window[\"ActiveXObject\"](\"MSXML2.XMLHTTP\");\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      * 初始化一个请求.注意，若在已经发出请求的对象上调用此方法，相当于立即调用abort().\r\n//      * @param url 该请求所要访问的URL该请求所要访问的URL\r\n//      * @param method 请求所使用的HTTP方法， 请使用 HttpMethod 定义的枚举值.\r\n//      */\r\n//     public open(url: string, method: string = \"GET\"): void {\r\n//         this._url = url;\r\n//         this._method = method;\r\n//         if (this._xhr) {\r\n//             this._xhr.abort();\r\n//             this._xhr = null;\r\n//         }\r\n//         let xhr = this.getXHR();//new XMLHttpRequest();\r\n//         if (window[\"XMLHttpRequest\"]) {\r\n//             xhr.addEventListener(\"load\", this.onload.bind(this));\r\n//             xhr.addEventListener(\"error\", this.onerror.bind(this));\r\n//         } else {\r\n//             xhr.onreadystatechange = this.onReadyStateChange.bind(this);\r\n//         }\r\n//         xhr.onprogress = this.updateProgress.bind(this);\r\n//         xhr.ontimeout = this.onTimeout.bind(this)\r\n//         xhr.open(this._method, this._url, true);\r\n//         this._xhr = xhr;\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      * 发送请求.\r\n//      * @param data 需要发送的数据\r\n//      */\r\n//     public send(data?: any): void {\r\n//         if (this._responseType != null) {\r\n//             this._xhr.responseType = this._responseType;\r\n//         }\r\n//         if (this._withCredentials != null) {\r\n//             this._xhr.withCredentials = this._withCredentials;\r\n//         }\r\n//         if (this.headerObj) {\r\n//             for (let key in this.headerObj) {\r\n//                 this._xhr.setRequestHeader(key, this.headerObj[key]);\r\n//             }\r\n//         }\r\n//         this._xhr.timeout = this.timeout;\r\n//         this._xhr.send(data);\r\n        \r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      * 如果请求已经被发送,则立刻中止请求.\r\n//      */\r\n//     public abort(): void {\r\n//         if (this._xhr) {\r\n//             this._xhr.abort();\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      * 返回所有响应头信息(响应头名和值), 如果响应头还没接受,则返回\"\".\r\n//      */\r\n//     public getAllResponseHeaders(): string {\r\n//         if (!this._xhr) {\r\n//             return null;\r\n//         }\r\n//         let result = this._xhr.getAllResponseHeaders();\r\n//         return result ? result : \"\";\r\n//     }\r\n\r\n//     private headerObj: any;\r\n//     /**\r\n//      * @private\r\n//      * 给指定的HTTP请求头赋值.在这之前,您必须确认已经调用 open() 方法打开了一个url.\r\n//      * @param header 将要被赋值的请求头名称.\r\n//      * @param value 给指定的请求头赋的值.\r\n//      */\r\n//     public setRequestHeader(header: string, value: string): void {\r\n//         if (!this.headerObj) {\r\n//             this.headerObj = {};\r\n//         }\r\n//         this.headerObj[header] = value;\r\n//     }\r\n//     public clearRequestHeader(){\r\n//         this.headerObj = null;\r\n//     }\r\n//     /**\r\n//      * @private\r\n//      * 返回指定的响应头的值, 如果响应头还没被接受,或该响应头不存在,则返回\"\".\r\n//      * @param header 要返回的响应头名称\r\n//      */\r\n//     public getResponseHeader(header: string): string {\r\n//         if (!this._xhr) {\r\n//             return null;\r\n//         }\r\n//         let result = this._xhr.getResponseHeader(header);\r\n//         return result ? result : \"\";\r\n//     }\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private onTimeout(): void {\r\n//         this.emit(CommonEvent.IO_ERROR);\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private onReadyStateChange(): void {\r\n//         let xhr = this._xhr;\r\n//         if (xhr.readyState == 4) {// 4 = \"loaded\"\r\n//             let ioError = (xhr.status >= 400 || xhr.status == 0);\r\n//             let url = this._url;\r\n//             let self = this;\r\n//             window.setTimeout(function (): void {\r\n//                 if (ioError) {//请求错误\r\n//                     self.emit(CommonEvent.IO_ERROR);\r\n//                 }\r\n//                 else {\r\n//                     self.emit(CommonEvent.COMPLETE);\r\n//                 }\r\n//             }, 0)\r\n\r\n//         }\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private updateProgress(event): void {\r\n//         if (event.lengthComputable) {\r\n//             this.emit( CommonEvent.PROGRESS_DATA,event.loaded,event.total);\r\n//         }\r\n//     }\r\n\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private onload(): void {\r\n//         let self = this;\r\n//         let xhr = this._xhr;\r\n//         let url = this._url;\r\n//         let ioError = (xhr.status >= 400);\r\n//         window.setTimeout(function (): void {\r\n//             if (ioError) {//请求错误\r\n//                 self.emit(CommonEvent.IO_ERROR);\r\n//             }\r\n//             else {\r\n//                 self.emit(CommonEvent.COMPLETE);\r\n//             }\r\n//         }, 0);\r\n//     }\r\n\r\n//     /**\r\n//      * @private\r\n//      */\r\n//     private onerror(): void {\r\n//         let url = this._url;\r\n//         let self = this;\r\n//         window.setTimeout(function (): void {\r\n//             self.emit(CommonEvent.IO_ERROR);\r\n//         }, 0);\r\n//     }\r\n// }\r\n"]}